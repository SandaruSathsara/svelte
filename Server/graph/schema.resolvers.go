package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"log"

	"example.com/mod/graph/model"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// CreateWomenSneaker is the resolver for the createWomenSneaker field.
func (r *mutationResolver) CreateWomenSneaker(ctx context.Context, id *string, name *string, price *float64, description *string) (*model.WomenSneakers, error) {
	db, err := GetDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newSneaker := &model.WomenSneakers{
		ID:          *id,
		Name:        *name,
		Price:       *price,
		Description: *description,
	}

	result := db.Create(newSneaker)
	if result.Error != nil {
		log.Println("Error creating WomenSneaker", result.Error)
		return nil, result.Error
	}
	return newSneaker, nil
}

// CreateMenSneaker is the resolver for the createMenSneaker field.
func (r *mutationResolver) CreateMenSneaker(ctx context.Context, id *string, name *string, price *float64, description *string) (*model.MenSneakers, error) {
	db, err := GetDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newSneaker := &model.MenSneakers{
		ID:          *id,
		Name:        *name,
		Price:       *price,
		Description: *description,
	}

	result := db.Create(newSneaker)
	if result.Error != nil {
		log.Println("Error creating MenSneaker", result.Error)
		return nil, result.Error
	}
	return newSneaker, nil
}

// Mensneakers is the resolver for the mensneakers field.
func (r *queryResolver) Mensneakers(ctx context.Context) ([]*model.MenSneakers, error) {
	db, err := GetDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	var sneakers []*model.MenSneakers
	result := db.Find(&sneakers)
	if result.Error != nil {
		log.Println("Error querying MenSneakers", result.Error)
		return nil, result.Error
	}
	return sneakers, nil
}

// Womensneakers is the resolver for the womensneakers field.
func (r *queryResolver) Womensneakers(ctx context.Context) ([]*model.WomenSneakers, error) {
	db, err := GetDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	var sneakers []*model.WomenSneakers
	result := db.Find(&sneakers)
	if result.Error != nil {
		log.Println("Error querying WomenSneakers", result.Error)
		return nil, result.Error
	}
	return sneakers, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func GetDatabase() (*gorm.DB, error) {

	db, err := gorm.Open(sqlite.Open("graph/database.db"), &gorm.Config{})
	if err != nil {
		return nil, err
	}
	return db, nil
}
